"use strict";(self.webpackChunkgxplus_docs=self.webpackChunkgxplus_docs||[]).push([[847],{8804:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=t(216),l=t(5303);const s={},o="Intro",r={id:"plugins/create-a-plugin/intro",title:"Intro",description:"Today, you will follow along on how to make a plugin! This guide will cover the basics of making a plugin, and how to get started. If you have any questions, feel free to ask in our #support channel.",source:"@site/docs/plugins/create-a-plugin/intro.mdx",sourceDirName:"plugins/create-a-plugin",slug:"/plugins/create-a-plugin/intro",permalink:"/gxplus-docs/docs/plugins/create-a-plugin/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/FleetPoint/gxplus-docs/tree/master/docs/plugins/create-a-plugin/intro.mdx",tags:[],version:"current",lastUpdatedBy:"Fisher",lastUpdatedAt:1719594981e3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create a Plugin",permalink:"/gxplus-docs/docs/category/create-a-plugin"}},a={},c=[{value:"Type Support w/ luau",id:"type-support-w-luau",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"intro",children:"Intro"}),"\n",(0,i.jsxs)(n.p,{children:["Today, you will follow along on how to make a plugin! This guide will cover the basics of making a plugin, and how to get started. If you have any questions, feel free to ask in our ",(0,i.jsx)(n.code,{children:"#support"})," channel."]}),"\n",(0,i.jsx)(n.p,{children:"As an example, here's what a plugin might look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'--!strict\nlocal GXPlus = require(script.Parent.Parent.lib.include.node_modules["@gxplus"].types.dist.types)\n\ntype Preferences = {\n\tconfigOption1: string\n}\n\nlocal plugin: GXPlus.VehicleStatePlugin<Preferences> = {\n\tname = "Identifiable Plugin Name",\n\tinvocationType = "vehicle_state_update",\n\tinvocationContext = "server",\n\toverrideDefault = false,\n\tpreferences = {\n\t\tconfigOption1: "Hello world!"\n\t},\n\tinvoke = function(state, preferences, context)\n\t\t-- code goes here\n\tend,\n}\n\nreturn plugin\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's break this down"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," is the name of the plugin"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"invocationType"})," is the type of event that will trigger the Plugin","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"standalone"})," is a plugin that is not triggered by an event, but is instead called directly like a function"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"vehicle_state_update"})," is triggered when the state of a vehicle changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"player_enter"})," is triggered when a player enters a vehicle"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"player_exit"})," is triggered when a player exits a vehicle"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"invocationContext"})," is the context in which the Plugin will be invoked (client or server)"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Client-sided plugins are not currently supported"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"overrideDefault"})," is whether or not the plugin will override the default behavior (applies to ",(0,i.jsx)(n.code,{children:"player_enter"})," and ",(0,i.jsx)(n.code,{children:"player_exit"})," events)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"preferences"})," is a table of configuration options, it uses the ",(0,i.jsx)(n.code,{children:"Preferences"})," type to help with correction and auto-complete"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"invoke"})," is the function that will be called when the plugin is invoked"]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["All plugins besides ",(0,i.jsx)(n.code,{children:"standalone"})," plugins also have an ",(0,i.jsx)(n.code,{children:"initialize"})," plugin that is called when the plugin is loaded"]}),(0,i.jsxs)(n.p,{children:["It has the same parameters as ",(0,i.jsx)(n.code,{children:"invoke"})]})]}),"\n",(0,i.jsx)(n.h2,{id:"type-support-w-luau",children:"Type Support w/ luau"}),"\n",(0,i.jsxs)(n.p,{children:["Plugins (and the ",(0,i.jsx)(n.code,{children:"BusConfiguration"})," for that matter) use the ",(0,i.jsx)(n.code,{children:"luau"})," type system. This means that you can use types to help with auto-complete and error checking."]}),"\n",(0,i.jsx)(n.p,{children:"This basically tells you what you can put for a certain option/property, and it will tell you if you put something wrong."})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5303:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6372);const l={},s=i.createContext(l);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);